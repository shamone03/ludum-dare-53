//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Acceleration"",
            ""id"": ""9cc7cefc-ec9f-4757-9d65-ef3376f7f380"",
            ""actions"": [
                {
                    ""name"": ""Default"",
                    ""type"": ""Value"",
                    ""id"": ""4337b0ef-63e8-4ef6-9865-84f4a2a71ee3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b51fe647-c31b-438e-b9ac-aa0fc634cb5c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a979690-b3cd-4d1c-9b2a-072195b296e5"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""887053c7-b971-4bde-a5a8-778060dd2c1b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7199b447-beea-4841-9d5a-fb35552b0173"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6a765f29-daad-4a15-a920-00c29ec9c6fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b45ed578-6079-4219-aee0-e217b8f4f4fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Steering"",
            ""id"": ""e577e6e8-5318-4b94-874c-310bb1eea784"",
            ""actions"": [
                {
                    ""name"": ""Default"",
                    ""type"": ""Value"",
                    ""id"": ""c02e8fad-4607-4a04-a352-9899467ef37e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c4ec4691-14d2-4eb1-8c44-9c742f032cab"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bc40d307-6223-4d90-a78d-73ce1a25c542"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ecb556ae-c5ff-4e76-b963-cb363414b65a"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4d5d5d7d-2dc8-47b3-8eed-e735dd454d0a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2b8e1dc4-487a-4d53-b174-ead1112528fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""527d0d85-728f-4572-96ec-74474e0a951e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Brake"",
            ""id"": ""a5732cfb-fd33-46a2-9307-a6746732db55"",
            ""actions"": [
                {
                    ""name"": ""Default"",
                    ""type"": ""Button"",
                    ""id"": ""679ba885-f883-481e-b8af-53df0a5c9db4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d87fc2d5-78ed-4319-8fc6-c64be409ea59"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Flip"",
            ""id"": ""8f018ce2-bcf9-4033-bbde-7e14dfcfec81"",
            ""actions"": [
                {
                    ""name"": ""Default"",
                    ""type"": ""Button"",
                    ""id"": ""129e584c-f83a-4e69-8bd6-be94b8f9a3e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55f6b073-9c60-4ec3-8cb6-77511f924a4a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Default"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Acceleration
        m_Acceleration = asset.FindActionMap("Acceleration", throwIfNotFound: true);
        m_Acceleration_Default = m_Acceleration.FindAction("Default", throwIfNotFound: true);
        // Steering
        m_Steering = asset.FindActionMap("Steering", throwIfNotFound: true);
        m_Steering_Default = m_Steering.FindAction("Default", throwIfNotFound: true);
        // Brake
        m_Brake = asset.FindActionMap("Brake", throwIfNotFound: true);
        m_Brake_Default = m_Brake.FindAction("Default", throwIfNotFound: true);
        // Flip
        m_Flip = asset.FindActionMap("Flip", throwIfNotFound: true);
        m_Flip_Default = m_Flip.FindAction("Default", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Acceleration
    private readonly InputActionMap m_Acceleration;
    private List<IAccelerationActions> m_AccelerationActionsCallbackInterfaces = new List<IAccelerationActions>();
    private readonly InputAction m_Acceleration_Default;
    public struct AccelerationActions
    {
        private @CarInput m_Wrapper;
        public AccelerationActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Default => m_Wrapper.m_Acceleration_Default;
        public InputActionMap Get() { return m_Wrapper.m_Acceleration; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AccelerationActions set) { return set.Get(); }
        public void AddCallbacks(IAccelerationActions instance)
        {
            if (instance == null || m_Wrapper.m_AccelerationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AccelerationActionsCallbackInterfaces.Add(instance);
            @Default.started += instance.OnDefault;
            @Default.performed += instance.OnDefault;
            @Default.canceled += instance.OnDefault;
        }

        private void UnregisterCallbacks(IAccelerationActions instance)
        {
            @Default.started -= instance.OnDefault;
            @Default.performed -= instance.OnDefault;
            @Default.canceled -= instance.OnDefault;
        }

        public void RemoveCallbacks(IAccelerationActions instance)
        {
            if (m_Wrapper.m_AccelerationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAccelerationActions instance)
        {
            foreach (var item in m_Wrapper.m_AccelerationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AccelerationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AccelerationActions @Acceleration => new AccelerationActions(this);

    // Steering
    private readonly InputActionMap m_Steering;
    private List<ISteeringActions> m_SteeringActionsCallbackInterfaces = new List<ISteeringActions>();
    private readonly InputAction m_Steering_Default;
    public struct SteeringActions
    {
        private @CarInput m_Wrapper;
        public SteeringActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Default => m_Wrapper.m_Steering_Default;
        public InputActionMap Get() { return m_Wrapper.m_Steering; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SteeringActions set) { return set.Get(); }
        public void AddCallbacks(ISteeringActions instance)
        {
            if (instance == null || m_Wrapper.m_SteeringActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteeringActionsCallbackInterfaces.Add(instance);
            @Default.started += instance.OnDefault;
            @Default.performed += instance.OnDefault;
            @Default.canceled += instance.OnDefault;
        }

        private void UnregisterCallbacks(ISteeringActions instance)
        {
            @Default.started -= instance.OnDefault;
            @Default.performed -= instance.OnDefault;
            @Default.canceled -= instance.OnDefault;
        }

        public void RemoveCallbacks(ISteeringActions instance)
        {
            if (m_Wrapper.m_SteeringActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISteeringActions instance)
        {
            foreach (var item in m_Wrapper.m_SteeringActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteeringActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SteeringActions @Steering => new SteeringActions(this);

    // Brake
    private readonly InputActionMap m_Brake;
    private List<IBrakeActions> m_BrakeActionsCallbackInterfaces = new List<IBrakeActions>();
    private readonly InputAction m_Brake_Default;
    public struct BrakeActions
    {
        private @CarInput m_Wrapper;
        public BrakeActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Default => m_Wrapper.m_Brake_Default;
        public InputActionMap Get() { return m_Wrapper.m_Brake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrakeActions set) { return set.Get(); }
        public void AddCallbacks(IBrakeActions instance)
        {
            if (instance == null || m_Wrapper.m_BrakeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrakeActionsCallbackInterfaces.Add(instance);
            @Default.started += instance.OnDefault;
            @Default.performed += instance.OnDefault;
            @Default.canceled += instance.OnDefault;
        }

        private void UnregisterCallbacks(IBrakeActions instance)
        {
            @Default.started -= instance.OnDefault;
            @Default.performed -= instance.OnDefault;
            @Default.canceled -= instance.OnDefault;
        }

        public void RemoveCallbacks(IBrakeActions instance)
        {
            if (m_Wrapper.m_BrakeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrakeActions instance)
        {
            foreach (var item in m_Wrapper.m_BrakeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrakeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrakeActions @Brake => new BrakeActions(this);

    // Flip
    private readonly InputActionMap m_Flip;
    private List<IFlipActions> m_FlipActionsCallbackInterfaces = new List<IFlipActions>();
    private readonly InputAction m_Flip_Default;
    public struct FlipActions
    {
        private @CarInput m_Wrapper;
        public FlipActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Default => m_Wrapper.m_Flip_Default;
        public InputActionMap Get() { return m_Wrapper.m_Flip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlipActions set) { return set.Get(); }
        public void AddCallbacks(IFlipActions instance)
        {
            if (instance == null || m_Wrapper.m_FlipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlipActionsCallbackInterfaces.Add(instance);
            @Default.started += instance.OnDefault;
            @Default.performed += instance.OnDefault;
            @Default.canceled += instance.OnDefault;
        }

        private void UnregisterCallbacks(IFlipActions instance)
        {
            @Default.started -= instance.OnDefault;
            @Default.performed -= instance.OnDefault;
            @Default.canceled -= instance.OnDefault;
        }

        public void RemoveCallbacks(IFlipActions instance)
        {
            if (m_Wrapper.m_FlipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlipActions instance)
        {
            foreach (var item in m_Wrapper.m_FlipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlipActions @Flip => new FlipActions(this);
    public interface IAccelerationActions
    {
        void OnDefault(InputAction.CallbackContext context);
    }
    public interface ISteeringActions
    {
        void OnDefault(InputAction.CallbackContext context);
    }
    public interface IBrakeActions
    {
        void OnDefault(InputAction.CallbackContext context);
    }
    public interface IFlipActions
    {
        void OnDefault(InputAction.CallbackContext context);
    }
}
